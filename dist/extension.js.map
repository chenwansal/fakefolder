{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://another-folder-view/./src/AppState/AppState.ts","webpack://another-folder-view/./src/Entity/RENode.ts","webpack://another-folder-view/./src/Helper/CommandHelper.ts","webpack://another-folder-view/./src/Service/SaveService.ts","webpack://another-folder-view/./src/System/CommandSystem.ts","webpack://another-folder-view/./src/UI/QuickPickItemElement.ts","webpack://another-folder-view/./src/UI/QuickPickWindow.ts","webpack://another-folder-view/external commonjs \"vscode\"","webpack://another-folder-view/external node-commonjs \"fs\"","webpack://another-folder-view/external node-commonjs \"path\"","webpack://another-folder-view/webpack/bootstrap","webpack://another-folder-view/./src/extension.ts"],"sourcesContent":["import { TextDocument, TreeView } from \"vscode\";\r\nimport { REDataProvider, REElement } from \"../extension\";\r\n\r\nexport class AppState {\r\n\r\n    static re: REDataProvider;\r\n    static treeview: TreeView<REElement>;\r\n    static curTextDocu: TextDocument;\r\n\r\n}","export class RENode {\r\n\r\n    id: number;\r\n    isFolder: boolean;\r\n    name: string;\r\n    truePath: string;\r\n    parentID: number;\r\n    childrenFolder: number[];\r\n    childrenFile: number[];\r\n\r\n    constructor(id: number, name: string, isFolder: boolean, truePath: string, parentID: number) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.isFolder = isFolder;\r\n        this.truePath = truePath;\r\n        this.parentID = parentID;\r\n        this.childrenFolder = [];\r\n        this.childrenFile = [];\r\n    }\r\n\r\n    RemoveChild(targetNodeId: number) { \r\n        this._RemoveChild(this.childrenFolder, targetNodeId);\r\n        this._RemoveChild(this.childrenFile, targetNodeId);\r\n    }\r\n\r\n    private _RemoveChild(arr: number[], targetNodeId: number) {\r\n        let index = arr.findIndex(value => value == targetNodeId);\r\n        if (index != -1) {\r\n            arr.slice(index, 1);\r\n        }\r\n    }\r\n\r\n}","const PROJECT_NAME = \"another-folder-view\";\r\n\r\nexport class CommandHelper {\r\n\r\n    static GetFullCommand(cmd: string) {\r\n        return PROJECT_NAME + \".\" + cmd;\r\n    }\r\n}","import { RENode } from \"../Entity/RENode\";\r\nimport * as fs from \"fs\";\r\n\r\nexport class SaveService {\r\n\r\n    public static Instance: SaveService;\r\n    all: RENode[];\r\n    jsonPath: string;\r\n\r\n    constructor(refilterJsonPath: string) {\r\n        this.jsonPath = refilterJsonPath;\r\n        this.all = [];\r\n        this.all.push(this.CreateRoot());\r\n        if (SaveService.Instance == null) {\r\n            SaveService.Instance = this;\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    private CreateRoot() {\r\n        return new RENode(0, \"root\", true, \"\", -1);\r\n    }\r\n\r\n    GetCount() {\r\n        return this.all.length;\r\n    }\r\n\r\n    Travel(callback: (node: RENode) => void) {\r\n        this.all.forEach(callback);\r\n    }\r\n\r\n    AddNode(node: RENode) {\r\n        this.all.push(node);\r\n        this.SaveAll();\r\n        console.log(this.all.length);\r\n    }\r\n\r\n    RootNode() {\r\n        return this.all[0];\r\n    }\r\n\r\n    RemoveNode(nodeId: number) {\r\n        let arr = this.all;\r\n        let index = arr.findIndex(value => value.id == nodeId);\r\n        if (index != -1) {\r\n            arr.splice(index, 1);\r\n            for (let i = 0; i < arr.length; i += 1) {\r\n                let node = arr[i];\r\n                node.RemoveChild(nodeId);\r\n            }\r\n        }\r\n    }\r\n\r\n    FindNode(nodeId: number) {\r\n        return this.all.find(value => value.id == nodeId);\r\n    }\r\n\r\n    FindNodeWithDir(dir: string) {\r\n        return this.all.find(value => value.isFolder && value.name == dir);\r\n    }\r\n\r\n    GetFolderNode(): RENode[] {\r\n        let res = this.all.filter(value => value.isFolder);\r\n        return res;\r\n    }\r\n\r\n    LoadAll() {\r\n        let jsonPath = this.jsonPath;\r\n        if (!fs.existsSync(jsonPath)) {\r\n            console.log(\"NO FILTER\");\r\n            return;\r\n        }\r\n        let str: string = fs.readFileSync(jsonPath, { encoding: \"utf8\" });\r\n        try {\r\n            this.all = JSON.parse(str);\r\n            if (this.all.length == 0) {\r\n                this.all.push(this.CreateRoot());\r\n                this.SaveAll();\r\n            }\r\n        } catch {\r\n            this.SaveAll();\r\n        }\r\n    }\r\n\r\n    SaveAll() {\r\n        let jsonPath = this.jsonPath;\r\n        let str: string = JSON.stringify(this.all);\r\n        fs.writeFileSync(jsonPath, str, { encoding: \"utf-8\" });\r\n    }\r\n\r\n}","import * as vscode from 'vscode';\r\nimport { AppState } from '../AppState/AppState';\r\nimport { RENode } from '../Entity/RENode';\r\nimport { CommandHelper } from '../Helper/CommandHelper';\r\nimport { SaveService } from '../Service/SaveService';\r\nimport { QuickPickWindow } from '../UI/QuickPickWindow';\r\nimport { QuickPickItemElement } from '../UI/QuickPickItemElement';\r\nimport path = require('path');\r\n\r\nfunction GetFolderItems(save: SaveService) {\r\n    let items: QuickPickItemElement[] = [];\r\n    save.GetFolderNode().forEach(folder => {\r\n        items.push(new QuickPickItemElement(folder.name));\r\n    });\r\n    return items;\r\n}\r\n\r\nexport class CommandSystem {\r\n\r\n    static Init(ctx: vscode.ExtensionContext) {\r\n        this.RegisterCreateFolder(ctx);\r\n        this.RegisterPutFileToFolder(ctx);\r\n    }\r\n\r\n    private static RegisterCreateFolder(ctx: vscode.ExtensionContext) {\r\n\r\n        let dis1 = vscode.commands.registerCommand(CommandHelper.GetFullCommand(\"create-fake-folder\"), () => {\r\n            let save = SaveService.Instance;\r\n            let curFolderInput = new QuickPickWindow();\r\n            let folderToCreate = \"\";\r\n            curFolderInput.OnConfirmHandle = (curFolderName) => {\r\n\r\n                folderToCreate = curFolderName;\r\n\r\n                let parentFolderInput = new QuickPickWindow();\r\n                parentFolderInput.OnConfirmHandle = (parentFolderName) => {\r\n                    let parentNode = save.FindNodeWithDir(parentFolderName);\r\n                    if (!parentNode) {\r\n                        let node = new RENode(save.GetCount(), folderToCreate, true, \"\", -1);\r\n                        save.AddNode(node);\r\n                        return;\r\n                    } else {\r\n                        let node = new RENode(save.GetCount(), folderToCreate, true, \"\", parentNode.id);\r\n                        parentNode.childrenFolder.push(node.id);\r\n                        save.AddNode(node);\r\n                    }\r\n                    AppState.re.TriggerTreeChange();\r\n                };\r\n\r\n                parentFolderInput.Open(\"Create Fake Folder(2/2)\", \"Input Parent Folder Name\", true, GetFolderItems(save));\r\n            };\r\n            curFolderInput.Open(\"Create Fake Folder(1/2)\", \"Input Folder Name\", false, []);\r\n        });\r\n    }\r\n\r\n    private static RegisterPutFileToFolder(ctx: vscode.ExtensionContext) {\r\n        let dis1 = vscode.commands.registerCommand(CommandHelper.GetFullCommand(\"put-file-to-fake-folder\"), () => {\r\n            if (AppState.curTextDocu) {\r\n                let curFileTruePath = AppState.curTextDocu.fileName;\r\n                let save = SaveService.Instance;\r\n                let targetFolderInput = new QuickPickWindow();\r\n                targetFolderInput.OnConfirmHandle = (targetFolderName) => {\r\n                    let parentNode = save.FindNodeWithDir(targetFolderName);\r\n                    if (!parentNode) {\r\n                        return;\r\n                    }\r\n                    let node = new RENode(save.GetCount(), path.basename(curFileTruePath), false, curFileTruePath, parentNode.id);\r\n                    parentNode.childrenFile.push(node.id);\r\n                    save.AddNode(node);\r\n                    AppState.re.TriggerTreeChange();\r\n                };\r\n                targetFolderInput.Open(\"Put Current File To Fake Folder\", \"Select Target Folder\", true, GetFolderItems(save));\r\n            } else {\r\n                console.log(\"未选中\");\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import * as vscode from 'vscode';\r\n\r\nexport class QuickPickItemElement implements vscode.QuickPickItem {\r\n    label: string;\r\n    kind?: vscode.QuickPickItemKind | undefined;\r\n    description?: string | undefined;\r\n    detail?: string | undefined;\r\n    picked?: boolean | undefined;\r\n    alwaysShow?: boolean | undefined;\r\n    buttons?: readonly vscode.QuickInputButton[] | undefined;\r\n\r\n    constructor(label: string) {\r\n        this.label = label;\r\n    }\r\n\r\n}","import * as vscode from 'vscode';\r\n\r\nexport class QuickPickWindow {\r\n\r\n    private inputValue: string;\r\n\r\n    OnConfirmHandle: (value: string) => void;\r\n\r\n    constructor() {\r\n        this.inputValue = \"\";\r\n        this.OnConfirmHandle = () => { }\r\n    }\r\n\r\n    Open(title: string, placeHolder: string, isSelect: boolean, items: vscode.QuickPickItem[]) {\r\n        let pick = vscode.window.createQuickPick();\r\n        pick.title = title;\r\n        pick.items = items;\r\n        pick.placeholder = placeHolder;\r\n        pick.busy = true;\r\n        pick.show();\r\n        pick.onDidChangeValue(value => {\r\n            this.inputValue = value;\r\n        });\r\n        pick.onDidAccept(() => {\r\n            pick.busy = false;\r\n            pick.hide();\r\n            if (!isSelect) {\r\n                this.OnConfirmHandle(this.inputValue);\r\n            }\r\n        });\r\n        pick.onDidChangeSelection((e) => {\r\n            if (!isSelect) {\r\n                return;\r\n            }\r\n            if (e && e.length > 0) {\r\n                let v = e[0];\r\n                this.OnConfirmHandle(v.label);\r\n            }\r\n        });\r\n    }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\nimport * as fs from \"fs\";\r\nimport { SaveService } from './Service/SaveService';\r\nimport path = require('path');\r\nimport { RENode } from './Entity/RENode';\r\nimport { CommandSystem } from './System/CommandSystem';\r\nimport { AppState } from './AppState/AppState';\r\n\r\nconst ROOT_PATH =\r\n    vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0\r\n        ? vscode.workspace.workspaceFolders[0].uri.fsPath\r\n        : undefined;\r\nconst REFILTER_FILE_NAME = \"refilter.json\";\r\n\r\nfunction PopMessage(msg: string) {\r\n    vscode.window.showInformationMessage(msg);\r\n}\r\n\r\nlet curFile = \"\";\r\n\r\nasync function OpenFile(path: string) {\r\n    if (curFile == path) {\r\n        return;\r\n    }\r\n    curFile = path;\r\n    let docu: vscode.TextDocument = await vscode.workspace.openTextDocument(path);\r\n    vscode.window.showTextDocument(docu);\r\n}\r\n\r\nexport class REDataProvider implements vscode.TreeDataProvider<REElement> {\r\n\r\n    curNode: RENode;\r\n    curElement: REElement;\r\n\r\n    constructor(save: SaveService) {\r\n        this.curNode = save.RootNode();\r\n        console.log(this.curNode);\r\n        this.curElement = new REElement(this.curNode);\r\n    }\r\n\r\n    private _onDidChangeTreeData: vscode.EventEmitter<REElement | void> = new vscode.EventEmitter<REElement | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<REElement | void | null | undefined> = this._onDidChangeTreeData.event;\r\n\r\n    getTreeItem(element: REElement): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: REElement): vscode.ProviderResult<REElement[]> {\r\n\r\n        if (!element || !element.node) {\r\n            console.log(\"GET ROOT CHILDREN\");\r\n            return Promise.resolve([this.curElement]);\r\n        }\r\n\r\n        let res: REElement[] = [];\r\n\r\n        let node = element.node;\r\n        let save = SaveService.Instance;\r\n        if (node.isFolder) {\r\n\r\n            for (let i = 0; i < node.childrenFolder.length; i += 1) {\r\n                let folderId = node.childrenFolder[i];\r\n                let tar = save.FindNode(folderId);\r\n                if (tar) {\r\n                    res.push(new REElement(tar));\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < node.childrenFile.length; i += 1) {\r\n                let fileId = node.childrenFile[i];\r\n                let tar = save.FindNode(fileId);\r\n                if (tar) {\r\n                    res.push(new REElement(tar, vscode.TreeItemCollapsibleState.None));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        console.log(\"GET CHILD CHILDREN\");\r\n        return Promise.resolve(res);\r\n\r\n    }\r\n\r\n    TriggerTreeChange() {\r\n        if (this._onDidChangeTreeData) {\r\n            this._onDidChangeTreeData.fire();\r\n        }\r\n        console.log(\"FIRE\");\r\n    }\r\n\r\n    resolveTreeItem(item: vscode.TreeItem, element: REElement, token: vscode.CancellationToken): vscode.ProviderResult<vscode.TreeItem> {\r\n\r\n        if (!element || !element.node) {\r\n            return Promise.resolve(item);\r\n        }\r\n\r\n        if (!element.node.isFolder) {\r\n            this.TriggerTreeChange();\r\n        }\r\n\r\n        if (AppState.treeview.selection.find(value => value == element)) {\r\n            OpenFile(element.node.truePath);\r\n            return Promise.resolve(element);\r\n        }\r\n\r\n        return Promise.resolve(element);\r\n    }\r\n\r\n}\r\n\r\nexport class REElement extends vscode.TreeItem {\r\n\r\n    node: RENode;\r\n\r\n    constructor(node: RENode, collapsibleState: vscode.TreeItemCollapsibleState = vscode.TreeItemCollapsibleState.Collapsed) {\r\n        super(node.name, collapsibleState);\r\n        this.node = node;\r\n    }\r\n\r\n}\r\n\r\nfunction GetFilterPath(): string {\r\n    if (ROOT_PATH) {\r\n        return path.join(ROOT_PATH, REFILTER_FILE_NAME);\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n    // REGISTER CALLBACK\r\n    vscode.window.onDidChangeActiveTextEditor(e => {\r\n        let doc = e?.document;\r\n        if (doc) {\r\n            AppState.curTextDocu = doc;\r\n        }\r\n    });\r\n\r\n    // REGISTER COMMAND\r\n    CommandSystem.Init(context);\r\n\r\n    let filterPath = GetFilterPath();\r\n    if (!fs.existsSync(filterPath)) {\r\n        PopMessage(\"Not Found: \" + filterPath);\r\n        return;\r\n    }\r\n\r\n    // LOAD FROM refilter.json\r\n    let save: SaveService = new SaveService(filterPath);\r\n    save.LoadAll();\r\n    console.log('(1/2)Resource Folder Loaded Nodes...');\r\n\r\n    // CREATE Treeview\r\n    let provider = new REDataProvider(save);\r\n    let dis2 = vscode.window.registerTreeDataProvider(\"RETreeview\", provider);\r\n    let treeview = vscode.window.createTreeView(\"RETreeview\", {\r\n        treeDataProvider: provider,\r\n    });\r\n    AppState.re = provider;\r\n    AppState.treeview = treeview;\r\n\r\n    if (!ROOT_PATH) {\r\n        console.log(\"no workspace\");\r\n        return;\r\n    }\r\n\r\n    console.log('(2/2)Resource Folder Rendered Treeview...');\r\n\r\n    // RENDER Treeview\r\n\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() { }\r\n"],"names":["constructor","id","name","isFolder","truePath","parentID","this","childrenFolder","childrenFile","RemoveChild","targetNodeId","_RemoveChild","arr","index","findIndex","value","slice","static","cmd","PROJECT_NAME","SaveService","refilterJsonPath","jsonPath","all","push","CreateRoot","Instance","RENode","GetCount","length","Travel","callback","forEach","AddNode","node","SaveAll","console","log","RootNode","RemoveNode","nodeId","splice","i","FindNode","find","FindNodeWithDir","dir","GetFolderNode","filter","LoadAll","fs","existsSync","str","readFileSync","encoding","JSON","parse","stringify","writeFileSync","GetFolderItems","save","items","folder","QuickPickItemElement","ctx","RegisterCreateFolder","RegisterPutFileToFolder","vscode","commands","registerCommand","CommandHelper","GetFullCommand","curFolderInput","QuickPickWindow","folderToCreate","OnConfirmHandle","curFolderName","parentFolderInput","parentFolderName","parentNode","AppState","re","TriggerTreeChange","Open","curTextDocu","curFileTruePath","fileName","targetFolderInput","targetFolderName","path","basename","label","inputValue","title","placeHolder","isSelect","pick","window","createQuickPick","placeholder","busy","show","onDidChangeValue","onDidAccept","hide","onDidChangeSelection","e","v","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","ROOT_PATH","workspace","workspaceFolders","uri","fsPath","curFile","REDataProvider","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","curNode","curElement","REElement","getTreeItem","element","getChildren","Promise","resolve","res","folderId","tar","fileId","TreeItemCollapsibleState","None","fire","resolveTreeItem","item","token","treeview","selection","async","docu","openTextDocument","showTextDocument","OpenFile","TreeItem","collapsibleState","Collapsed","super","context","onDidChangeActiveTextEditor","doc","document","CommandSystem","Init","filterPath","join","msg","showInformationMessage","provider","registerTreeDataProvider","createTreeView","treeDataProvider"],"sourceRoot":""}